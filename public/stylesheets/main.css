@charset "UTF-8";
/*------------------------------------*    #MAIN
\*------------------------------------*/
/**
 * Combine all the SASS components required to compile the main.css file.
 **/
/* = Functions = */
/**
 * Import these first as they can be used within settings
 **/
/*------------------------------------*    #FUNCTIONS
\*------------------------------------*/
/* = Settings = */
/* == Main settings == */
/*------------------------------------*    #GENERAL SETTINGS
\*------------------------------------*/
/**
 * The series's general settings. Builds on the global general settings.
 */
/*------------------------------------*    #GENERAL SETTINGS
\*------------------------------------*/
/**
 * WARNING
 *
 * These settings should rarely be changed directly, as this may have
 * far-reaching consequences. Instead, redefine variables at the
 * series/group/site level.
 **/
/* = Namespace = */
/**
 * A prefix that can be used to prevent class name collisions. Use "null" to
 * ignore.
 **/
/* = Colours = */
/**
 * All colours for in settings files; only tints/shades or combinations of these
 * colours may be used elsewhere.
 **/
/* == Tint and shade percentage == */
/**
 * Set the default tint/shade percentage for creating lighter/darker version
 * of a colour.
 **/
/* == High-level colours == */
/* == Utility colours == */
/* = Fonts =*/
/* = Layout = */
/* = Animation = */
/* = Media queries = */
/**
 * This notation has been chosen as it is compatible with Inuit CSS
 * `media-query()` mixin found in `_tools.responsive`.
 **/
/* = File locations and prefixes = */
/* = Colours = */
/* = Fonts =*/
/* = Layout = */
/* = Animations and general appearance = */
/* == Variant settings == */
/*------------------------------------*    #VARIANT SETTINGS
\*------------------------------------*/
/**
 * Settings that are derived from the site's general settings. Builds on the
 * group's variant settings.
 */
/*------------------------------------*    #VARIANT SETTINGS
\*------------------------------------*/
/**
 * Site settings that are derived from the main's primary settings.
 **/
/**
 * WARNING
 *
 * These settings should rarely be changed directly, as this may have
 * far-reaching consequences. Instead, redefine variables at the
 * series/group/site level.
 **/
/* = High-level colours = */
/* = Utility colours = */
/* = Fonts = */
/* = Layout = */
/* == inuitcss settings == */
/*!
 * inuitcss, by @csswizardry
 *
 * github.com/inuitcss | inuitcss.com
 */
/*------------------------------------*    #INUITCSS FRAMEWORK SETTINGS
\*------------------------------------*/
/**
 * The site's inuitcss settings. Builds on the groups' inuitcss settings.
 */
/*------------------------------------*    #INUITCSS FRAMEWORK SETTINGS
\*------------------------------------*/
/**
 * Map sagovau settings to inuitcssâ€™ to override its defaults; add any
 * additional global settings.
 */
/* = Namespace = */
/* = High-level base settings = */
/* = Repsonsive breakpoints = */
/* = Box = */
/* = Layout = */
/* = Widths = */
/* = Layout = */
/* = Spacing = */
/* == Component-specific setting == */
/*------------------------------------*    #SPECIFIC SETTINGS
\*------------------------------------*/
/**
 * Series settings that have specific uses, such as controlling which classes
 * are output or the design of a particular object or component.
 **/
/*------------------------------------*    #SPECIFIC SETTINGS
\*------------------------------------*/
/**
 * Global settings that have specific uses, such as controlling which classes
 * are output or the design of a particular object or component.
 **/
/**
 * WARNING
 *
 * These settings should rarely be changed directly, as this may have
 * far-reaching consequences. Instead, redefine variables series/group/site
 * level.
 **/
/* = BASE = */
/* == HEADINGS == */
/**
 * 1. Try to ensure the header sizes fit closely to the base spacing and
 *    base font size so they don't require large line heights to conform to the
 *    baseline grid. The last three headers can use the standard font size as
 *    they are rarely used.
 **/
/* = TRUMPS = */
/* === DISPLAY HELPERS == */
/* = BASE */
/* == MAIN == */
/* == OBJECTS == */
/* === DELIMITED === */
/* === TOGGLE === */
/* === WRAPPER === */
/* == TRUMPS ==*/
/* = Tools and mixins = */
/*------------------------------------*    #MIXINS
\*------------------------------------*/
/**
 * rem($property, $value)
 *
 * Sets both rem and absolute pixel values for a given property, making it
 * easier to maintain compatibility with older browsers.
 *
 * $property is a CSS property that can accept either a single pixel or rem
 * value.
 *
 * $value is a unitless ratio - eg 1.5.
 */
/**
 * ui-link
 *
 * Remove the text-decoration from <a> tags, except on hover.
 *
 * Useful for styled UI elements, such as menus, buttons, etc.
 **/
/**
 * vertical-align
 *
 * Taken from http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
 **/
/* = Resets etc. = */
/* == inuitcss == */
/*------------------------------------*    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*------------------------------------*    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/*------------------------------------*    #SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
hr,
table,
fieldset, figure,
pre,
hr,
.seamless-form__item,
.related-information__group {
  margin-bottom: 20px;
  margin-bottom: 1.42857rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once,here.
 */
ul, ol, dd {
  margin-left: 40px;
  margin-left: 2.85714rem; }

/* == Global == */
/*------------------------------------*    #FORM
\*------------------------------------*/
/**
 * Form resets.
 */
textarea {
  resize: vertical; }

/*------------------------------------*    #IFRAME
\*------------------------------------*/
/**
 * Remove borders from iFrames
 */
iframe {
  border-style: none; }

/* = Base styling = */
/* == inuitcss == */
/*------------------------------------*    #IMAGES
\*------------------------------------*/
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, letâ€™s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none; }

/*------------------------------------*    #LISTS
\*------------------------------------*/
/**
 * Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0; }

/* == Bedrock == */
/*------------------------------------*    #BLOCKQUOTE
\*------------------------------------*/
/**
 * Generic blockquote styling.
 */
blockquote {
  font-size: 17px;
  font-size: 1.21429rem;
  line-height: 1.17647;
  border-left: solid #e6eaee 6.66667px;
  padding-left: 13.33333px; }

/*------------------------------------*    #FONTS
\*------------------------------------*/
/**
 * Add extend-only classes for main fonts, so multiple properties can be
 * declared in the one place.
 */
h1, h2, .related-information__title, h3, .action-module__title, .feature-module__title, .icon-module__title, .navigation-tile__title, .small-module__title, h4 {
  font-family: "Frutiger W01", Helvetica, Arial, sans-serif; }

/*------------------------------------*    #FORM
\*------------------------------------*/
/**
 * Basic form styling.
 */
textarea {
  height: 160px; }

/*------------------------------------*    #HEADINGS
\*------------------------------------*/
/**
 * Basic heading styles
 **/
h1,
h2,
h3,
h4,
h5,
h6 {
  page-break-after: avoid; }
  h1 strong,
  h1 b,
  h2 strong,
  h2 b,
  h3 strong,
  h3 b,
  h4 strong,
  h4 b,
  h5 strong,
  h5 b,
  h6 strong,
  h6 b {
    font-weight: inherit; }

/**
 * 1. Loop through the setting maps to create the headings
 *
 * 2. Add the necessary extend-only classes, if required.
 *
 * 3. If the font-family is either the base font or highlight font, extend the
 *    appropriate class. (This allows other parameters, such as letter-spacing,
 *    to be set elsewhere.
 **/
h1 {
  /* [1] */
  color: #002855;
  /* [1] */
  /* [3] */
  /* [1] */
  font-size: 40px;
  font-size: 2.85714rem;
  line-height: 1;
  /* [1] */
  font-weight: normal; }

h2, .related-information__title {
  /* [1] */
  color: #002855;
  /* [1] */
  /* [3] */
  /* [1] */
  font-size: 28px;
  font-size: 2rem;
  line-height: 1.42857;
  /* [1] */
  font-weight: normal; }

h3, .action-module__title, .feature-module__title, .icon-module__title, .navigation-tile__title, .small-module__title {
  /* [1] */
  color: #002855;
  /* [1] */
  /* [3] */
  /* [1] */
  font-size: 20px;
  font-size: 1.42857rem;
  line-height: 1;
  /* [1] */
  font-weight: normal; }

h4 {
  /* [1] */
  color: #002855;
  /* [1] */
  /* [3] */
  /* [1] */
  font-size: 14px;
  font-size: 1rem;
  line-height: 1.42857;
  /* [1] */
  font-weight: bold;
  /* [1] */
  text-transform: uppercase; }

h5 {
  /* [1] */
  font-size: 14px;
  font-size: 1rem;
  line-height: 1.42857;
  /* [1] */
  font-weight: bold;
  /* [1] */
  text-transform: uppercase; }

h6 {
  /* [1] */
  font-size: 14px;
  font-size: 1rem;
  line-height: 1.42857;
  /* [1] */
  font-weight: normal;
  /* [1] */
  text-transform: uppercase; }

/*------------------------------------*    #MAIN
\*------------------------------------*/
/**
 * Set a background colour and minimum height on the main element.
 */
main {
  background-color: #fff;
  font-size: 14px;
  min-height: 480px; }

/*------------------------------------*    #PAGE
\*------------------------------------*/
/**
 * High-, page-level styling.
 *
 * Builds on the styles defined in Inuit CSS's '_base.page.scss';
 **/
/*------------------------------------*    #PAGE
\*------------------------------------*/
/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward â€˜jumpsâ€™ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 0.875em;
  /* [1] */
  line-height: 1.42857;
  /* [1] */
  background-color: #666;
  color: #333;
  overflow-y: scroll;
  /* [2] */
  min-height: 100%;
  /* [3] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -ms-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */ }

/**
 * Set fonts, background colours and minimum widths.
 **/
html {
  font-family: "Frutiger W01", Helvetica, Arial, sans-serif; }

body {
  min-width: 320px;
  position: relative; }

article,
aside,
nav {
  font-size: 14px; }

a {
  color: #002855; }

hr {
  border: 0;
  border-bottom: 1px solid #8094aa; }

@page {
  margin: 1cm;
  size: A4 portrait; }

/*------------------------------------*    #TABLES
\*------------------------------------*/
/**
 * Basic table styling.
 */
th,
td {
  border: 1px solid #e6eaee;
  padding: 10px; }
  th > * :last-child,
  td > * :last-child {
    margin-bottom: 0; }

th {
  background-color: #e6eaee;
  font-weight: bold;
  text-align: center; }

/* = Objects = */
/* == inuitcss == */
/*------------------------------------*    #BOX
\*------------------------------------*/
/**
 * The box object simply boxes off content.
 */
/**
 * 1. So we can apply the `.box` class to naturally-inline elements.
 */
.box {
  display: block;
  /* [1] */
  padding: 20px; }
  .box > :last-child {
    margin-bottom: 0; }

/**
     * Small box.
     */
.box--small {
  padding: 10px; }

/*------------------------------------*    #LAYOUT
\*------------------------------------*/
/**
 * The inuitcss layout system uses `box-sizing: border-box;` and
 * `display: inline-block;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. Combine the layout items with
 * the widths found in `trumps.widths`.
 */
/**
 * Begin a layout group.
 */
.layout {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -20px; }

/**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
.layout__item {
  display: inline-block;
  /* [1] */
  padding-left: 20px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */ }

/**
     * Layouts with small gutters.
     */
.layout--small {
  margin-left: -10px; }
  .layout--small > .layout__item {
    padding-left: 10px; }

/**
     * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
     * markup will display in order 4, 3, 2, 1 on your page.
     */
.layout--rev {
  direction: rtl;
  text-align: left; }
  .layout--rev > .layout__item {
    direction: ltr;
    text-align: left; }

/**
     * Make the layout items fill up from the right hand side.
     */
.layout--right {
  text-align: right; }
  .layout--right > .layout__item {
    text-align: left; }

/*------------------------------------*    #LIST-BARE
\*------------------------------------*/
/**
 * The list-bare object simply removes any indents and bullet points from lists.
 */
.list-bare,
.secondary-navigation__list,
.slider__stage,
.sitemap__collection,
.sitemap__list {
  margin: 0;
  padding: 0;
  list-style: none; }

/*------------------------------------*    #LIST-BLOCK
\*------------------------------------*/
/**
 * The list-block object creates blocky list items out of a `ul` or `ol`.
 */
.list-block {
  margin: 0;
  padding: 0;
  list-style: none; }

.list-block__item,
.list-block > li {
  padding: 20px; }

/*------------------------------------*    #LIST-INLINE
\*------------------------------------*/
/**
 * The list-inline object simply displays a list of items in one line.
 */
.list-inline,
.social__list {
  margin: 0;
  padding: 0;
  list-style: none; }
  .list-inline > li, .social__list > li {
    display: inline-block; }

/*------------------------------------*    #TABLES
\*------------------------------------*/
.table {
  width: 100%; }

/* == Bedrock == */
/*------------------------------------*    #DELIMITED
\*------------------------------------*/
/**
 * Add delimiters between consecutive items.
 */
/**
 * Note: because these are displayed inline is is necessary to include
 * whitespace between each delimited element, with the expection of
 * delimited--comma.
 **/
.delimited {
  display: inline; }

.delimited--pipe + .delimited:before {
  content: "| "; }

/*------------------------------------*    #FIXED ASPECT RATIO
\*------------------------------------*/
/**
 * Full-width containers with fixed aspect ratios. The container's content can
 * then be set to occupy the full width and height of the container.
 *
 * Useful for responsively embedding video.
 */
.fixed-aspect-ratio {
  height: 0;
  padding: 0;
  position: relative;
  width: 100%; }

.fixed-aspect-ratio__content {
  height: 100%;
  margin: 0;
  padding: 0;
  position: absolute;
  width: 100%; }

.fixed-aspect-ratio--2x1 {
  padding-bottom: 50%; }

.fixed-aspect-ratio--16x9 {
  padding-bottom: 56.25%; }

.fixed-aspect-ratio--4x3 {
  padding-bottom: 75%; }

.fixed-aspect-ratio--1x1 {
  padding-bottom: 100%; }

/*------------------------------------*    #TOGGLE
\*------------------------------------*/
/**
 * A generic SVG-based toggle. Uses the "is-active" class to swap layers.
 **/
/*a, button*/
.toggle {
  background-color: transparent;
  border: 0;
  display: inline-block;
  padding: 0;
  vertical-align: middle; }

/**
     * 1. Prevent unwanted spacing
     *
     * 2. Make the active layer transparent if the toggle isn't active
     *
     * 3. Swap opacity when the toggle is active to display the correct
     *    layer(s)
     *
     * 4. Prevent the contents of the button from being repositioned when pressed in IE
     **/
/*svg*/
.toggle__icon {
  left: 0;
  /* [4] */
  position: relative;
  /* [4] */
  top: 0;
  /* [4] */
  vertical-align: top;
  /* [1] */ }

/*g, path*/
.toggle--smooth .toggle__layer {
  transition: opacity 0.3s; }

.toggle.is-active .toggle__layer {
  opacity: 0;
  /* [3] */ }

/*path*/
.toggle__layer--active {
  opacity: 0;
  /* [2] */ }
  .toggle.is-active .toggle__layer--active {
    opacity: 1;
    /* [3] */ }

/*a, button*/
.toggle--brand {
  fill: #002855; }

/*a, button*/
.toggle--brand-light {
  fill: #e6eaee; }

/*------------------------------------*    #WRAPPER
\*------------------------------------*/
/**
 * Container with max-width for ensuring content width is restricted uniformly
 * on large screens.
 */
.wrapper {
  margin-left: auto;
  margin-right: auto;
  max-width: 1186px; }

.wrapper--ph-small {
  max-width: 1206px;
  padding: 0 10px; }

@media screen and (min-width: 720px) {
  .wrapper--large-and-up-ph-small {
    max-width: 1206px;
    padding: 0 10px; } }

/*------------------------------------*    #LAYOUT
\*------------------------------------*/
.layout {
  font-size: 0; }

.layout__item {
  font-size: 0; }

/* = Components = */
/* == Bedrock == */
/*------------------------------------*    #SEAMLESS FORM
\*------------------------------------*/
/**
 * User input forms, usually generated within the Seamless CMS
 */
/*div*/
/*div*/
.seamless-form__label {
  display: inline-block;
  vertical-align: top;
  width: 100%; }
  @media screen and (min-width: 480px) {
    .seamless-form__label {
      width: 33.3333333%; } }

/*div*/
.seamless-form__input {
  display: inline-block;
  vertical-align: top;
  width: 100%; }
  @media screen and (min-width: 480px) {
    .seamless-form__input {
      padding-left: 10px;
      width: 66.6666666%; } }
  .seamless-form__input input,
  .seamless-form__input select,
  .seamless-form__input textarea {
    width: 100%; }

/**
         * 1. Make sure the error is displayed by default, as Seamless form
         *    validation will not make any changes to the error container to
         *    hide or show it - it will only add content to it.
         *
         * 2. Use a variation to control error visibility for all other cases.
         **/
/*a, div*/
.seamless-form__error {
  color: #cc0000;
  font-weight: bold;
  text-decoration: none;
  display: block;
  /* [1] */ }

/*a, div*/
.seamless-form__error--inactive {
  display: none;
  /* [2] */ }

/**
 * Because classes can't be added to labels/inputs within the Seamless CMS
 * it is necessary to use descendant selectors to target them.
 */
.seamless-form--seamless table,
.seamless-form--seamless th,
.seamless-form--seamless td {
  border: 0;
  margin: 0;
  padding: 0; }

.seamless-form--seamless table {
  width: 100%; }
  .seamless-form--seamless table input,
  .seamless-form--seamless table select,
  .seamless-form--seamless table textarea {
    width: auto; }
  .seamless-form--seamless table label {
    padding-left: 10px; }

.seamless-form--seamless .seamless-form__error > a {
  color: inherit;
  text-decoration: inherit; }

/* == Series three == */
/*------------------------------------*    #ICON-MODULE
\*------------------------------------*/
/**
 * Styling for the Alpha series action ("call to action") module.
 * Note that the "module" component can only be imported once, so importing it
 * in multiple files does not cause duplication.
 **/
/*------------------------------------*    #MODULE
\*------------------------------------*/
/**
 * Shared (extend-only) styling for the Alpha series modules (eg feature module,
 * icon module, etc.)
 *
 * Because this module is required by several other components, but must be
 * included in the code before they are: *
 * 1. Set a default flag to show that this hasn't already been loaded
 *
 * 2. Only add the classes if they haven't already been added
 *
 * 3. Set a flag to show that the contents have been loaded
 **/
/* [1] */
/* [2] */
/*a*/
.feature-module, .icon-module, .navigation-tile, .small-module {
  border-color: #8094aa;
  border-style: solid;
  border-width: 0 0 1px;
  display: block;
  font-size: 14px;
  margin-bottom: 0;
  position: relative;
  text-decoration: none; }
  .feature-module:focus, .icon-module:focus, .navigation-tile:focus, .small-module:focus, .feature-module:hover, .icon-module:hover, .navigation-tile:hover, .small-module:hover {
    text-decoration: underline; }
  @media screen and (min-width: 720px) {
    .feature-module, .icon-module, .navigation-tile, .small-module {
      border-width: 0; } }

/*h2, h3*/
.action-module__title, .feature-module__title, .icon-module__title, .navigation-tile__title, .small-module__title {
  margin-bottom: 0;
  padding: 20px 0;
  text-decoration: inherit; }

/* [3] */
/*a*/
.action-module {
  /**
     * 1. Trigger new block formatting context so that the background surrounds
     *    all elements.
     *
     * 2. Apply negative margins to counteract the container's padding
     **/ }
  @media screen and (min-width: 720px) {
    .action-module {
      background-color: #e6eaee;
      margin: 0 -10px -10px;
      /* [2] */
      overflow: hidden;
      /* [1] */ } }
  @media screen and (min-width: 1024px) {
    .action-module {
      background-color: transparent;
      margin: 0; } }

/*h2*/
@media screen and (min-width: 720px) {
  .action-module__title {
    padding-left: 10px; } }

/*ul*/
.action-module__list {
  list-style: none; }
  @media screen and (min-width: 720px) {
    .action-module__list {
      margin: 0 10px;
      text-align: justify; }
      .action-module__list::after {
        /* [3] */
        content: '';
        display: inline-block;
        width: 100%; } }

/*li*/
.action-module__item {
  padding-left: 1.2em;
  text-align: left; }
  @media screen and (min-width: 720px) {
    .action-module__item {
      display: inline-block;
      font-size: 20px; } }
  @media screen and (min-width: 1024px) {
    .action-module__item {
      display: block;
      font-size: 14px; } }
  .touch .action-module__item {
    margin-top: -10px;
    padding-bottom: 10px;
    padding-top: 10px; }
  .action-module__item::before {
    background-image: url(-circle-arrow.svg);
    background-repeat: no-repeat;
    background-size: contain;
    content: '';
    display: inline-block;
    line-height: 0;
    height: 14px;
    margin-left: -1.2em;
    vertical-align: middle;
    width: 14px; }
    @media screen and (min-width: 720px) {
      .action-module__item::before {
        height: 20px;
        width: 20px; } }
    @media screen and (min-width: 1024px) {
      .action-module__item::before {
        height: 14px;
        width: 14px; } }

/*------------------------------------*    #FEATURE-MODULE
\*------------------------------------*/
/**
 * Styling for the Alpha series feature modules.
 * Note that the "module" component can only be imported once, so importing it
 * in multiple files does not cause duplication.
 **/
/*------------------------------------*    #MODULE
\*------------------------------------*/
/**
 * Shared (extend-only) styling for the Alpha series modules (eg feature module,
 * icon module, etc.)
 *
 * Because this module is required by several other components, but must be
 * included in the code before they are: *
 * 1. Set a default flag to show that this hasn't already been loaded
 *
 * 2. Only add the classes if they haven't already been added
 *
 * 3. Set a flag to show that the contents have been loaded
 **/
/* [1] */
/*a*/
@media screen and (min-width: 720px) {
  .feature-module {
    margin-bottom: 10px; } }

/*div*/
@media screen and (min-width: 720px) {
  .feature-module__image {
    background-repeat: no-repeat;
    background-size: cover;
    height: 0;
    padding-bottom: 76.40845%; } }

/*h2*/
@media screen and (min-width: 720px) {
  .feature-module__title {
    background-color: #000;
    background-color: rgba(0, 0, 0, 0.7);
    border-bottom-style: none;
    bottom: 0;
    color: #fff;
    left: 0;
    padding: 10px;
    position: absolute;
    width: 100%; } }

/*------------------------------------*    #ICON-MODULE
\*------------------------------------*/
/**
 * Styling for the Alpha series icon modules.
 * Note that the "module" component can only be imported once, so importing it
 * in multiple files does not cause duplication.
 **/
/*------------------------------------*    #MODULE
\*------------------------------------*/
/**
 * Shared (extend-only) styling for the Alpha series modules (eg feature module,
 * icon module, etc.)
 *
 * Because this module is required by several other components, but must be
 * included in the code before they are: *
 * 1. Set a default flag to show that this hasn't already been loaded
 *
 * 2. Only add the classes if they haven't already been added
 *
 * 3. Set a flag to show that the contents have been loaded
 **/
/* [1] */
/*a*/
@media screen and (min-width: 720px) {
  .icon-module {
    background-position: center left;
    background-repeat: no-repeat;
    background-size: contain;
    height: 0;
    padding-bottom: 25%;
    padding-left: 30%; } }

@media screen and (min-width: 1024px) {
  .icon-module {
    border-bottom-width: 1px;
    margin-bottom: 0; } }

/*a*/
@media screen and (min-width: 1024px) {
  .icon-module--index-0 {
    border-top-width: 1px; } }

/*a*/
@media screen and (min-width: 720px) {
  .icon-module--fees {
    background-image: url(-icon-fees.svg); } }

/*a*/
@media screen and (min-width: 720px) {
  .icon-module--find {
    background-image: url(-icon-find.svg); } }

/*a*/
@media screen and (min-width: 720px) {
  .icon-module--info {
    background-image: url(-icon-info.svg); } }

/*h2*/
@media screen and (min-width: 720px) {
  .icon-module__title {
    height: 0;
    margin-top: -10px;
    padding: 0;
    position: absolute;
    top: 50%; } }

/*------------------------------------*    #IMAGE-GALLERY
\*------------------------------------*/
/**
 * Styling for the Alpha series in-page image gallery.
 **/
/*div*/
.image-gallery {
  font-size: 14px; }

/*figure*/
.image-gallery__item {
  text-align: center; }

/*img*/
.image-gallery__image {
  margin-bottom: 10px; }

/*figcaption*/
.image-gallery__caption {
  margin-bottom: 20px; }

/*------------------------------------*    #NAVIGATION-TILE
\*------------------------------------*/
/**
 * Navigation tiles for level one pages.
 **/
/*a*/
.navigation-tile:hover {
  text-decoration: underline; }

.navigation-tile--index-0 {
  border-top-width: 1px; }
  @media screen and (min-width: 720px) {
    .navigation-tile--index-0 {
      border-top-width: 0; } }

/**
     * Use a div to create an image placeholder than won't cause the image to
     * be downloaded on mobile. Use in conjunction with .fixed-aspect-ratio and
     * .hidden
     *
     * 1. Use a negative bottom margin to allow the subsequent text
     *    to overlap. Use the $sagovau-navigation-tile-gradient-height variable
     *    to ensure the negative margin matches the gradient height.
     **/
/*div*/
.navigation-tile__image {
  background-repeat: no-repeat;
  background-size: cover;
  margin-bottom: -40px; }

/**
     * 1. Use the $sagovau-navigation-tile-gradient-height variable
     *    to ensure the gradient height matches the negative margin.
     *
     * 2. Relatively position the element so the background is displayed
     *    above the preceding image.
     **/
/*div*/
@media screen and (min-width: 720px) {
  .navigation-tile__text {
    background-image: url(/files/templates/00000000-0000-0000-0000-000000000000/f88a7f3c-df7e-430a-825c-24cfa8dec9a8/s3-navigation-tile-background.png);
    /* fallback for browsers not supporting css gradients */
    background-image: linear-gradient(rgba(255, 255, 255, 0.8), white 40px);
    /* [1] */
    background-position: 50% 0;
    padding: 20px;
    position: relative;
    /* [2] */ } }

.navigation-tile__text > :last-child {
  margin-bottom: 0; }

/**
         * 1. Add appropriate margins/padding to override default module title
         *    on larger screens
         **/
/*h2*/
@media screen and (min-width: 720px) {
  .navigation-tile__title {
    margin-bottom: 20px;
    /* [1] */
    padding: 0;
    /* [2] */ } }

/**
         * 1. Make sure the underline is correct colour.
         **/
/*h2*/
.navigation-tile__details {
  color: #333; }
  .navigation-tile:hover .navigation-tile__details {
    text-decoration: underline;
    /* [1] */ }

/*------------------------------------*    #PRIMARY-NAVIGATION
\*------------------------------------*/
/**
 * Styling for the Alpha series sites' primary (main) navigation menus.
 *
 * The navigation menus on small screens show only level one items, with a
 * button to toggle visibility. Navigation menus on larger devices show a
 * horizontal list of level one items, with a two-column dropdown of level two
 * and three items revealed on hover/focus.
 **/
/**
 * 1. Hide the legacy menu by default, as on smaller devices its visibility
 *    will be toggled by the user
 *
 * 2. Provide a variant class to toggle visibility
 *
 * 3. Display on larger devices
 *
 * 4. Display when JavaScript is not enabled
 **/
/*nav*/
.primary-navigation {
  display: none;
  /* [1] */
  font-size: 14px;
  height: 0; }
  .primary-navigation.is-active {
    display: block;
    /* [2] */ }
  @media screen and (min-width: 720px) {
    .primary-navigation {
      display: block;
      /* [3] */
      height: 40px; } }
  .no-js .primary-navigation {
    display: block;
    /* [4] */
    height: auto; }
    @media screen and (min-width: 720px) {
      .no-js .primary-navigation {
        width: auto;
        height: 40px; } }

/*nav*/
@media screen and (min-width: 720px) {
  .primary-navigation__search {
    position: absolute;
    text-align: right;
    right: 0;
    width: 100%; } }

/**
     * Note that that we are unable to customise the code produced by the CMS,
     * so we're stuck using IDs and nested styling. Ordinarily, this would be
     * avoided in favour of BEM-like class names.
     **/
/*nav*/
.primary-navigation__legacy-menu {
  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.3);
  /**
         * 1. Show the drop-down menu (levels two and three) on hover/focus on
         *    larger screens.
         **/
  /*
        & > li {
                position:relative;
                float:none;
                border-style:none;
                background:none;
            }

        }
        */ }
  @media screen and (min-width: 720px) {
    .primary-navigation__legacy-menu {
      box-shadow: none; } }
  .primary-navigation__legacy-menu ul {
    clear: left;
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
    width: 100%; }
  .primary-navigation__legacy-menu li {
    border-color: #7389a2;
    border-style: solid;
    border-width: 0;
    margin: 0;
    padding: 0;
    position: relative;
    width: 100%; }
  .primary-navigation__legacy-menu a {
    color: #002855;
    display: block;
    text-decoration: none;
    width: 100%; }
    @media screen and (min-width: 720px) {
      .primary-navigation__legacy-menu a {
        color: #fff; } }
    .primary-navigation__legacy-menu a:hover, .primary-navigation__legacy-menu a:focus {
      text-decoration: underline; }
  .primary-navigation__legacy-menu > ul {
    background-color: #e6eaee;
    padding: 0 10px; }
    @media screen and (min-width: 720px) {
      .primary-navigation__legacy-menu > ul {
        padding: 0; } }
  .primary-navigation__legacy-menu > ul > li {
    width: 100%; }
    @media screen and (min-width: 720px) {
      .primary-navigation__legacy-menu > ul > li {
        border-width: 0;
        float: left;
        width: auto; }
        .primary-navigation__legacy-menu > ul > li:hover, .primary-navigation__legacy-menu > ul > li:focus {
          /* [1] */ }
          .primary-navigation__legacy-menu > ul > li:hover > a, .primary-navigation__legacy-menu > ul > li:focus > a {
            background: #e6eaee;
            background: rgba(230, 234, 238, 0.95);
            color: #002855; }
          .primary-navigation__legacy-menu > ul > li:hover .dropdown-container, .primary-navigation__legacy-menu > ul > li:focus .dropdown-container {
            display: block; } }
    .primary-navigation__legacy-menu > ul > li + li {
      border-width: 1px 0 0; }
      @media screen and (min-width: 720px) {
        .primary-navigation__legacy-menu > ul > li + li {
          border-width: 0 0 0 1px; } }
    .primary-navigation__legacy-menu > ul > li > a {
      line-height: 100%;
      height: 40px;
      padding: 14px 10px; }
      .primary-navigation__legacy-menu > ul > li > a.active {
        font-weight: bold; }
  .primary-navigation__legacy-menu .dropdown-container {
    background: #e6eaee;
    background: rgba(230, 234, 238, 0.95);
    border-collapse: separate;
    border-top-width: 0;
    box-shadow: 2.5px 10px 10px rgba(0, 0, 0, 0.3);
    display: none;
    left: -1px;
    padding: 10px;
    padding-bottom: 0;
    position: absolute;
    overflow: visible;
    width: 420px; }
    .last > .primary-navigation__legacy-menu .dropdown-container {
      left: auto;
      right: -1px; }
  .primary-navigation__legacy-menu .dropdown-column {
    float: left;
    margin-right: -100%;
    width: 195px; }
    .primary-navigation__legacy-menu .dropdown-column.last {
      margin-left: 205px;
      margin-right: -100%; }
    .primary-navigation__legacy-menu .dropdown-column > ul > li > a {
      /* Menu headings */
      background: #002855;
      background: rgba(0, 40, 85, 0.8);
      color: #fff;
      font-weight: bold;
      margin-bottom: 10px;
      padding: 5px 10px; }
      .primary-navigation__legacy-menu .dropdown-column > ul > li > a:hover {
        background: #002855; }
    .primary-navigation__legacy-menu .dropdown-column > ul > li > ul {
      margin-bottom: 20px;
      padding-left: 10px; }
      .primary-navigation__legacy-menu .dropdown-column > ul > li > ul > li > a {
        /* Menu subheadings */
        color: #333;
        margin: 0;
        padding: 0; }

/*------------------------------------*    #RELATED-INFORMATION
\*------------------------------------*/
/**
 * Basic formatting for information that is tangentially related to the main
 * page content, such as image galleries, links to other posts, references, etc.
 */
.related-information {
  font-size: 14px; }

.related-information__group + .related-information__group {
  border-top: 1px solid #8094aa;
  padding-top: 20px; }

/*------------------------------------*    #SECONDARY-NAVIGATION
\*------------------------------------*/
/**
 * Styling for the Alpha series sites' secondary (side) navigation menus.
 **/
/*nav*/
.secondary-navigation {
  font-size: 14px;
  padding-top: 10px; }

/*ul*/
.secondary-navigation__list {
  margin-left: 20px; }

/*li*/
.secondary-navigation__item {
  font-weight: normal; }
  .secondary-navigation__item::before {
    background-image: url(-circle-arrow.svg);
    background-repeat: no-repeat;
    background-size: contain;
    content: "";
    display: inline-block;
    height: 14px;
    margin-left: -20px;
    margin-right: 6px;
    vertical-align: middle;
    width: 14px; }
  .secondary-navigation__item.is-active.is-parent::before {
    -webkit-transform: rotate(90deg);
        -ms-transform: rotate(90deg);
            transform: rotate(90deg); }

/*li*/
.secondary-navigation__item--level-1 {
  font-weight: bold; }

/*a*/
.secondary-navigation__link.is-self {
  color: #333;
  pointer-events: none;
  text-decoration: none; }

/*------------------------------------*    #SOCIAL
\*------------------------------------*/
/**
 * Styling for the Alpha series site header social icons.
 */
/*div*/
.social {
  font-size: 14px;
  vertical-align: middle;
  color: #fff; }

/*ul*/
/*li*/
/*a*/
.social__link {
  text-decoration: none;
  color: inherit;
  font-weight: bold; }
  .social__link:focus, .social__link:hover {
    text-decoration: underline; }

/*img, svg*/
.social__icon {
  fill: currentColor;
  vertical-align: middle; }

/*img, svg*/
.social__icon--round {
  border-radius: 50%; }

/*------------------------------------*    #SLIDER
\*------------------------------------*/
/**
 * Styling for the Alpha series homepage slider.
 **/
/*div*/
.slider {
  border-bottom: 1px solid #8094aa;
  margin: -10px;
  margin-bottom: 0;
  padding-bottom: 50px;
  padding-top: 3px;
  position: relative; }
  @media screen and (min-width: 720px) {
    .slider {
      border-bottom: 0;
      margin-bottom: 10px;
      padding-bottom: 0; } }

/*div*/
/*div*/
.slider--static {
  padding-bottom: 10px; }
  @media screen and (min-width: 720px) {
    .slider--static {
      padding-bottom: 0; } }

/*div*/
.slider__controls {
  bottom: 0;
  padding: 10px;
  position: absolute;
  right: 0;
  text-align: center;
  width: 100%;
  z-index: 1; }
  @media screen and (min-width: 720px) {
    .slider__controls {
      bottom: 10px;
      text-align: left;
      width: auto; } }
  @media screen and (min-width: 1024px) {
    .slider__controls {
      bottom: 0; } }

/*button*/
.slider__control {
  background: #fff;
  border: 2px solid #002855;
  border-radius: 50%;
  bottom: 10px;
  display: inline-block;
  height: 30px;
  left: 10px;
  width: 30px; }
  .slider__control:hover {
    background: rgba(255, 255, 255, 0.5); }
  .slider__control:focus {
    outline: 0;
    box-shadow: 0 0 3px 1px #4d90fe; }
  .slider__control + .slider__control {
    margin-left: 20px; }

/*button*/
.slider__control--fill {
  fill: #002855; }

/*button*/
.slider__control--stroke {
  stroke: #002855;
  stroke-width: 2px; }

/*svg*/
.slider__icon {
  margin-top: -2px;
  margin-left: -2px; }

/*ul*/
.slider__stage {
  overflow: hidden;
  position: relative; }

/**
         * 1. Make sure the first item is postioned in front of the others so
         *    so there's no flash of content on load.
         *
         * 2. Make sure only the first item is displayed until the slider has initialised.
         **/
/*li*/
.slider__cell {
  -webkit-transform: translateX(0);
      -ms-transform: translateX(0);
          transform: translateX(0);
  width: 100%;
  z-index: 1;
  /* [1] */
  /*ul*/ }
  .slider__cell:first-child {
    z-index: 2;
    /* [1] */ }
  .slider__stage--loading .slider__cell + .slider__cell {
    display: none;
    /* [2] */ }

/*------------------------------------*    #SMALL-MODULE
\*------------------------------------*/
/**
 * Styling for the Alpha series feature modules.
 *
 * Note that the "module" component can only be imported once, so importing it
 * in multiple files does not cause duplication.
 **/
/*------------------------------------*    #MODULE
\*------------------------------------*/
/**
 * Shared (extend-only) styling for the Alpha series modules (eg feature module,
 * icon module, etc.)
 *
 * Because this module is required by several other components, but must be
 * included in the code before they are: *
 * 1. Set a default flag to show that this hasn't already been loaded
 *
 * 2. Only add the classes if they haven't already been added
 *
 * 3. Set a flag to show that the contents have been loaded
 **/
/* [1] */
/*a*/
@media screen and (min-width: 720px) {
  .small-module {
    margin-bottom: 10px; } }

/*a*/
@media screen and (min-width: 720px) {
  .small-module--separated {
    margin: 30px 0 40px; } }

/*div*/
@media screen and (min-width: 720px) {
  .small-module__image {
    background-repeat: no-repeat;
    background-size: cover;
    border-radius: 20px 20px 20px 0;
    float: left;
    height: 80px;
    margin: 0 10px;
    width: 80px;
    /*a*/
    /*a*/
    /*a*/
    /*a*/ }
    .small-module--index-0 .small-module__image {
      border-radius: 0 20px 20px; }
    .small-module--index-2 .small-module__image {
      border-radius: 20px 0 20px 20px; }
    .small-module--index-3 .small-module__image {
      border-radius: 0 20px 20px; }
    .small-module--index-5 .small-module__image {
      border-radius: 20px 0 20px 20px; } }

/*div*/
@media screen and (min-width: 720px) {
  .small-module__text {
    color: #333;
    overflow: hidden;
    margin: 0 10px; } }

/*h2*/
@media screen and (min-width: 720px) {
  .small-module__title {
    border: 0;
    font-size: 14px;
    font-size: 1rem;
    line-height: 1.42857;
    font-weight: bold;
    padding: 0; } }

/*------------------------------------*    #SITE-FOOTER
\*------------------------------------*/
/**
 * Add footer styling specific to the Alpha series of sites.
 */
/**
 * 1. Ensure children are positioned relative to the footer
 **/
/*footer*/
.site-footer {
  color: #fff;
  font-size: 14px;
  padding-bottom: 20px;
  position: relative;
  /* [1] */ }

/**
     * Because the site design, it's easiest to create the unusual curve of the
     * footer using inline SVG and divs.
     *
     * 1. Remove background elements from the usual flow
     **.

    /*div, svg*/
.site-footer__background {
  fill: #002855;
  position: absolute;
  /* [3] */ }

/*svg*/
.site-footer__background--primary {
  border-bottom-left-radius: 10px; }

/*div*/
.site-footer__background--secondary {
  background-color: #002855;
  border-bottom-right-radius: 10px;
  height: 25px;
  right: 0;
  width: 80%; }

/*div*/
.site-footer__disclaimer {
  background-color: #335377;
  background-image: url(/files/templates/00000000-0000-0000-0000-000000000000/f88a7f3c-df7e-430a-825c-24cfa8dec9a8/regional-menu-background.png);
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.15) 0%, transparent 13px);
  background-repeat: repeat-x;
  font-size: 12px;
  padding: 10px 20px;
  position: relative; }

/*a*/
.site-footer__link {
  color: #fff; }

/*div*/
.site-footer__link--partner-logo {
  text-decoration: none; }
  .site-footer__link--partner-logo + .site-footer__link--partner-logo {
    margin-left: 20px; }

/*div*/
.site-footer__partners {
  background-color: #002855;
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
  padding: 0 20px;
  position: relative;
  text-align: center; }
  @media screen and (min-width: 720px) {
    .site-footer__partners {
      background: transparent;
      box-shadow: none;
      max-width: 520px;
      text-align: left; } }

/*div*/
.site-footer__switch {
  padding-top: 20px;
  text-align: center; }
  @media screen and (min-width: 720px) {
    .site-footer__switch {
      position: absolute;
      right: 20px;
      bottom: 20px; } }

/*------------------------------------*    #SITE-HEADER
\*------------------------------------*/
/**
 * Styling for the Alpha series site header.
 **/
/**
 * Custom site-header content can be set by defining a mixin called
 * sagovau-site-header-custom-content
 **/
/*header*/
.site-header {
  position: relative;
  z-index: 2;
  background-color: #002855; }

/*div*/
.site-header__banner {
  position: relative; }

/**
         * Custom site-header__logo content can be set by defining a mixin
         * called sagovau-site-header-logo-custom-content
         **/
/*h1*/
.site-header__logo {
  height: 100px;
  margin-bottom: 0; }

/*div*/
.site-header__quick-links {
  bottom: 10px;
  position: relative;
  right: 10px;
  text-align: right; }
  @media screen and (min-width: 480px) {
    .site-header__quick-links {
      position: absolute; } }

/*div*/
.site-header__navigation {
  background-color: #002855;
  background-image: url(/files/templates/00000000-0000-0000-0000-000000000000/f88a7f3c-df7e-430a-825c-24cfa8dec9a8/regional-menu-background.png);
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.15) 0%, transparent 13px);
  background-repeat: repeat-x;
  position: relative;
  width: 100%; }

/*------------------------------------*    #SITE-SEARCH
\*------------------------------------*/
/**
 * Styling for the Alpha series site search.
 */
/**
 * 1. Relatively position the search field so it's below the menu on small
 *    screens.
 *
 * 2. Absolutely position on large screens.
 **/
/*form*/
.site-search {
  background-color: #e6eaee;
  display: inline-block;
  padding: 10px 10px 0;
  position: relative; }
  @media screen and (min-width: 720px) {
    .site-search {
      background-image: none;
      border-bottom-left-radius: 20px;
      border-color: #002855;
      border-style: solid;
      border-width: 0 0 3px 3px;
      box-shadow: none;
      display: none;
      padding: 0;
      position: absolute;
      right: 0;
      top: 100%; }
      .site-search.is-active {
        display: inline-block; } }
  @media screen and (min-width: 1024px) {
    .site-search {
      border-width: 0;
      display: inline-block;
      top: 0; } }

/*input*/
.site-search__input {
  background-color: transparent;
  border: 0;
  display: inline-block;
  height: 40px;
  padding: 0;
  vertical-align: middle; }

/*input[type=text]*/
.site-search__input--text {
  background-color: #fff;
  border-radius: 3px;
  display: inline-block;
  padding-left: 10px;
  padding-right: 40px;
  width: 100%; }
  @media screen and (min-width: 720px) {
    .site-search__input--text {
      border-radius: 0;
      background-color: transparent;
      padding-left: 20px; } }
  @media screen and (min-width: 1024px) {
    .site-search__input--text {
      display: inline-block;
      /* [2] */ } }
  .site-search__input--text::-webkit-input-placeholder {
    color: #002855;
    font-style: italic; }
  .site-search__input--text::-moz-placeholder {
    color: #002855;
    font-style: italic; }
  .site-search__input--text:-ms-input-placeholder {
    color: #002855;
    font-style: italic; }
  .site-search__input--text::placeholder {
    color: #002855;
    font-style: italic; }

/*input[type=text]*/
.site-search__input--error::-webkit-input-placeholder {
  color: #cc0000;
  font-weight: bold; }
.site-search__input--error::-moz-placeholder {
  color: #cc0000;
  font-weight: bold; }
.site-search__input--error:-ms-input-placeholder {
  color: #cc0000;
  font-weight: bold; }
.site-search__input--error::placeholder {
  color: #cc0000;
  font-weight: bold; }

/*input[type=text]*/
.site-search__input--submit {
  fill: #002855;
  position: absolute;
  right: 10px; }
  @media screen and (min-width: 720px) {
    .site-search__input--submit {
      right: 0; } }

/*------------------------------------*    #SITEMAP
\*------------------------------------*/
/**
 * Styling for the Alpha series "sitemap".
 */
/*div*/
.sitemap {
  background-color: #333;
  background-image: url("-sitemap-background.png");
  background-position: left top;
  background-repeat: no-repeat;
  background-size: auto 100%;
  font-size: 14px;
  min-height: 200px;
  position: relative;
  overflow: hidden;
  text-align: center;
  width: 100%; }
  @media screen and (min-width: 720px) {
    .sitemap {
      text-align: right; } }

/*h1*/
.sitemap__logo {
  margin: 0;
  padding: 20px; }
  @media screen and (min-width: 720px) {
    .sitemap__logo {
      left: 0;
      position: absolute;
      top: 0; } }

/*ul*/
.sitemap__collection {
  display: inline-block;
  min-height: 160px;
  padding: 0 20px 20px;
  text-align: left; }
  @media screen and (min-width: 720px) {
    .sitemap__collection {
      padding-top: 40px; } }

/*ul*/
.sitemap__collection--separated {
  padding-top: 40px; }

/*li*/
.sitemap__group {
  display: inline-block;
  margin-left: -20px;
  vertical-align: top;
  width: auto; }
  @media screen and (min-width: 720px) {
    .sitemap__group {
      border-left: 1px solid #8094aa;
      margin-bottom: -200px;
      margin-left: 20px;
      min-width: 120px;
      padding-bottom: 200px;
      padding-left: 10px; } }

/*h2*/
.sitemap__title {
  font-size: 14px;
  font-size: 1rem;
  line-height: 1.42857;
  color: #fff;
  margin-bottom: 10px; }

/*ul*/
.sitemap__list {
  font-size: 12px;
  font-size: 0.85714rem;
  line-height: 1.66667; }

/*a*/
.sitemap__link {
  color: #e6eaee;
  display: inline-block;
  text-decoration: none;
  /**
                     * 1. Add extra padding on touch devices to give larger tap targets
                     *
                     * 2. Add a negative margin so the padding doesn't affect the baseline
                     **/ }
  .sitemap__link:focus, .sitemap__link:hover {
    text-decoration: underline; }
  .touch .sitemap__link {
    margin-top: -10px;
    /* [2] */
    padding: 10px 0;
    /* [1] */ }

/*------------------------------------*    #SPOTLIGHT
\*------------------------------------*/
/**
 * Styling for the Alpha series spotlight.
 **/
/*a*/
.spotlight {
  background-color: #fff;
  display: block;
  font-size: 14px;
  margin: 0;
  position: relative;
  overflow: hidden;
  text-decoration: none; }
  @media screen and (min-width: 720px) {
    .spotlight {
      padding: 0; } }
  .spotlight:hover, .spotlight:focus {
    text-decoration: underline; }

/**
     * A absolutely positioned container to make sure the image is sized correctly
     **/
/*div*/
@media screen and (min-width: 1024px) {
  .spotlight__background {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0; } }

/*img*/
.spotlight__image {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  height: 0;
  max-width: auto;
  margin: 0;
  padding-bottom: 58.33333%;
  position: relative;
  width: 100%;
  margin-bottom: -20px; }
  @media screen and (min-width: 480px) {
    .spotlight__image {
      padding-bottom: 38.88889%; } }
  @media screen and (min-width: 720px) {
    .spotlight__image {
      padding-bottom: 280px; } }
  @media screen and (min-width: 1024px) {
    .spotlight__image {
      margin-bottom: 0;
      position: absolute; } }

/*div*/
.spotlight__image--left {
  background-position: left; }

/*div*/
.spotlight__image--25\% {
  background-position: 25%; }

/*div*/
.spotlight__image--75\% {
  background-position: 75%; }

/*div*/
.spotlight__image--right {
  background-position: right; }

/*div*/
.spotlight__text {
  font-size: 18px;
  font-size: 1.28571rem;
  line-height: 1.11111;
  background-image: linear-gradient(rgba(255, 255, 255, 0.65), white 20px);
  padding: 20px 10px;
  padding-bottom: 10px;
  position: relative; }
  @media screen and (min-width: 720px) {
    .spotlight__text {
      padding-right: 150px; } }
  @media screen and (min-width: 1024px) {
    .spotlight__text {
      background: url(-spotlight-overlay.svg);
      background-position: right;
      background-repeat: no-repeat;
      background-size: auto 100%;
      display: table-cell;
      height: 280px;
      padding: 0 50px 20px 20px;
      vertical-align: middle;
      width: 380px; } }
  .spotlight__text > :last-child {
    margin-bottom: 0; }

/*h2*/
.spotlight__title {
  font-size: 32px;
  font-size: 2.28571rem;
  line-height: 1.25;
  /*a*/ }
  .spotlight:hover .spotlight__title, .spotlight:focus .spotlight__title {
    text-decoration: underline; }

/* = Overrides, etc. = */
/* == inuitcss == */
/*------------------------------------*    #CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.clearfix` class appearing
 * over and over in your markup.
 */
.clearfix:after,
.box:after,
.small-module:after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*    #SPACING
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/**
     * Margin helper classes.
     *
     * Add margins.
     */
.u-m {
  margin: 20px !important; }

.u-mt {
  margin-top: 20px !important; }

.u-mr {
  margin-right: 20px !important; }

.u-mb {
  margin-bottom: 20px !important; }

.u-ml {
  margin-left: 20px !important; }

.u-mh {
  margin-right: 20px !important;
  margin-left: 20px !important; }

.u-mv {
  margin-top: 20px !important;
  margin-bottom: 20px !important; }

/**
     * Remove margins.
     */
.u-m0 {
  margin: 0 !important; }

.u-mt0 {
  margin-top: 0 !important; }

.u-mr0 {
  margin-right: 0 !important; }

.u-mb0 {
  margin-bottom: 0 !important; }

.u-ml0 {
  margin-left: 0 !important; }

.u-mh0 {
  margin-right: 0 !important;
  margin-left: 0 !important; }

.u-mv0 {
  margin-top: 0 !important;
  margin-bottom: 0 !important; }

/*------------------------------------*    #WIDTHS
\*------------------------------------*/
/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes can take a fraction-like format (e.g. `.u-2/3`) or a spoken-
 * word format (e.g. `.u-2-of-3`). Use these in your markup:
 *
 * <div class="u-7/12">
 */
.u-1-of-1 {
  width: 100% !important; }

.u-1-of-2 {
  width: 50% !important; }

.u-1-of-3 {
  width: 33.33333% !important; }

.u-2-of-3 {
  width: 66.66667% !important; }

.u-1-of-4 {
  width: 25% !important; }

.u-2-of-4 {
  width: 50% !important; }

.u-3-of-4 {
  width: 75% !important; }

.u-1-of-5 {
  width: 20% !important; }

.u-2-of-5 {
  width: 40% !important; }

.u-3-of-5 {
  width: 60% !important; }

.u-4-of-5 {
  width: 80% !important; }

/*------------------------------------*    #WIDTHS-RESPONSIVE
\*------------------------------------*/
/**
 * Responsive width classes based on your responsive settings.
 */
@media screen and (min-width: 480px) {
  .u-1-of-1-small-and-up {
    width: 100% !important; }
  .u-1-of-2-small-and-up {
    width: 50% !important; }
  .u-1-of-3-small-and-up {
    width: 33.33333% !important; }
  .u-2-of-3-small-and-up {
    width: 66.66667% !important; }
  .u-1-of-4-small-and-up {
    width: 25% !important; }
  .u-2-of-4-small-and-up {
    width: 50% !important; }
  .u-3-of-4-small-and-up {
    width: 75% !important; }
  .u-1-of-5-small-and-up {
    width: 20% !important; }
  .u-2-of-5-small-and-up {
    width: 40% !important; }
  .u-3-of-5-small-and-up {
    width: 60% !important; }
  .u-4-of-5-small-and-up {
    width: 80% !important; } }

@media screen and (min-width: 640px) {
  .u-1-of-1-medium-and-up {
    width: 100% !important; }
  .u-1-of-2-medium-and-up {
    width: 50% !important; }
  .u-1-of-3-medium-and-up {
    width: 33.33333% !important; }
  .u-2-of-3-medium-and-up {
    width: 66.66667% !important; }
  .u-1-of-4-medium-and-up {
    width: 25% !important; }
  .u-2-of-4-medium-and-up {
    width: 50% !important; }
  .u-3-of-4-medium-and-up {
    width: 75% !important; }
  .u-1-of-5-medium-and-up {
    width: 20% !important; }
  .u-2-of-5-medium-and-up {
    width: 40% !important; }
  .u-3-of-5-medium-and-up {
    width: 60% !important; }
  .u-4-of-5-medium-and-up {
    width: 80% !important; } }

@media screen and (min-width: 720px) {
  .u-1-of-1-large-and-up {
    width: 100% !important; }
  .u-1-of-2-large-and-up {
    width: 50% !important; }
  .u-1-of-3-large-and-up {
    width: 33.33333% !important; }
  .u-2-of-3-large-and-up {
    width: 66.66667% !important; }
  .u-1-of-4-large-and-up {
    width: 25% !important; }
  .u-2-of-4-large-and-up {
    width: 50% !important; }
  .u-3-of-4-large-and-up {
    width: 75% !important; }
  .u-1-of-5-large-and-up {
    width: 20% !important; }
  .u-2-of-5-large-and-up {
    width: 40% !important; }
  .u-3-of-5-large-and-up {
    width: 60% !important; }
  .u-4-of-5-large-and-up {
    width: 80% !important; } }

@media screen and (min-width: 1024px) {
  .u-1-of-1-huge {
    width: 100% !important; }
  .u-1-of-2-huge {
    width: 50% !important; }
  .u-1-of-3-huge {
    width: 33.33333% !important; }
  .u-2-of-3-huge {
    width: 66.66667% !important; }
  .u-1-of-4-huge {
    width: 25% !important; }
  .u-2-of-4-huge {
    width: 50% !important; }
  .u-3-of-4-huge {
    width: 75% !important; }
  .u-1-of-5-huge {
    width: 20% !important; }
  .u-2-of-5-huge {
    width: 40% !important; }
  .u-3-of-5-huge {
    width: 60% !important; }
  .u-4-of-5-huge {
    width: 80% !important; } }

/* == Global == */
/*------------------------------------*    #DISPLAY HELPERS
\*------------------------------------*/
/**
 * Prevent display, both visually and from screen-readers.
 *
 * Some screen readers will still access elements that have "display: none".
 * Using "display: none" AND "visibility: hidden" avoids this problem. More
 * information at: http://juicystudio.com/article/screen-readers-display-none.php
 * Hat tip: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css
 **/
.u-hidden,
.js .u-no-js,
.no-js .u-js-only {
  display: none !important;
  visibility: hidden !important; }

@media screen and (min-width: 480px) {
  .u-hidden-small-and-up {
    display: none !important;
    visibility: hidden !important; }
  .u-display-block-small-and-up {
    display: block !important;
    visibility: visible !important; }
  .u-display-inline-block-small-and-up {
    display: inline-block !important;
    visibility: visible !important; } }

@media screen and (min-width: 640px) {
  .u-hidden-medium-and-up {
    display: none !important;
    visibility: hidden !important; }
  .u-display-block-medium-and-up {
    display: block !important;
    visibility: visible !important; }
  .u-display-inline-block-medium-and-up {
    display: inline-block !important;
    visibility: visible !important; } }

@media screen and (min-width: 720px) {
  .u-hidden-large-and-up {
    display: none !important;
    visibility: hidden !important; }
  .u-display-block-large-and-up {
    display: block !important;
    visibility: visible !important; }
  .u-display-inline-block-large-and-up {
    display: inline-block !important;
    visibility: visible !important; } }

@media screen and (min-width: 1024px) {
  .u-hidden-huge {
    display: none !important;
    visibility: hidden !important; }
  .u-display-block-huge {
    display: block !important;
    visibility: visible !important; }
  .u-display-inline-block-huge {
    display: inline-block !important;
    visibility: visible !important; } }

@media (-webkit-min-device-pixel-ratio: 1.5), (-moz-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), min-resolution {
  .u-hidden-retina {
    display: none !important;
    visibility: hidden !important; }
  .u-display-block-retina {
    display: block !important;
    visibility: visible !important; }
  .u-display-inline-block-retina {
    display: inline-block !important;
    visibility: visible !important; } }

/*
 * Hide visually, but have it available for screen readers: * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 * Hat tip: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css
 */
.u-visually-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important; }

/**
 * Selectively display or hide content depending on the browser's capabilities.
 * Requires Modernizr.
 *
 * Note: in order for these classes to work properly when JavaScript is
 * disabled, the html element must include the exclusion classes (eg "no-*")
 * used below. These must be removed using JavaScript prior to running Modernizr
*  (with the exception of "no-js" which Modernizr removes already).
 */
/**
 * Hide elements from print
 */
@media print {
  .u-no-print {
    display: none !important; } }

/**
 * Hide elements except in print
 */
@media not print {
  .u-print-only {
    display: none !important;
    visibility: hidden !important; } }

/*------------------------------------*    #COLOR SCHEMES
\*------------------------------------*/
/**
 * Apply colour combinations.
 **/
.color-scheme--warning {
  background-color: #fff6e6 !important; }
  .color-scheme--warning .color-scheme__highlight {
    color: #cc8400 !important; }

.color-scheme--danger {
  background-color: #ffe6e6 !important; }
  .color-scheme--danger .color-scheme__highlight {
    color: #cc0000 !important; }

/*# sourceMappingURL=data:application/json;base64, */
